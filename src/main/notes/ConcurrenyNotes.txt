Introduction to Processes and Threads

1. Process

    Life cycle of process
        - NEW, READY, WAIT, RUNNING, TERMINATED
    
    Program -> Set of instructions that we want to run
            -> Program will store in the harddisk

    Process -> Program in execution and A process can have multiple threads
            -> Process will store in RAM.

    Program --> Install(HDD) --> RUN --> Process(RAM)

2. How Process Runs in CPU:

    Take example Google Docs / Microsoft Word

    When started typing the data, many functionalities are in process
        1. Auto Save
        2. Grammar check
        3. Suggestions
        4. History
        5. Word count etc,.

    Take another example Google Chrome.
        When we opened multiple tabs, Chrome creates multiple threads.

3. Threads

    Thread is a lightweight process in CPU execution.

    Thread is Smallest unit of CPU execution.
    CPU has processors example : Dual, Quad and Octa core processor
    Threads of same process can't access each other’s stack data
    Threads of same process can access each other’s global data

    Core --> Each core takes a thread at a time(Execution)
         --> 1 core executes 1 thread at a time.

         Program --> Process --> creates multiple Threads.

4. Thread scheduling algorithms

    Operating system will take care of assigning the threads to cores based on
        execution time, priority, etc,.
    Scheduling algorithms like Round robin, First come First Serve etc,.

    Generally 1 core will executes one thread at a time and in life time it will executes
                many threads.

5. Concurrency and Parallelism

    Concurrency :

        Multiple threads executing in system, might not at once.
        In a Life Time of a process, one core will execute multiple threads at a time
            (or)
        A core will execute multiple threads, might not at same time.

        Concurrent programming requires time-bound CPU scheduling.
        Concurrent programming means more than one process is in execution at the same time,
            but only one of them might be making progress.

    Parallelism :

        Concurrency + Running at same time is known as Parallelism.

        Parallel programming requires multiple program counters.
        Parallel programming means more than one process is in execution as well as making progress at the same time.
        In a dual, quad, or octa core processor will execute many threads at a time.

        Parallelism is about multiple tasks or subtasks of the same task that literally run
           at the same time on a hardware with multiple computing resources like multi-core processor.

6. Multithreading vs Concurrency

    Multithreading is about having, running, and managing multiple threads in our application
        but not necessarily at the same time.
    Multithreading doesn't require multiple cores.
    Concurrency is about dealing with multiple threads at the same time achieved with the help
        of multithreading.
    Without multithreading, there is no concurrency.

    Concurrency is about multiple tasks which start, run, and complete in overlapping time periods,
        in no specific order.

8. Context Switching

    Switching between the multiple Threads.
    This will leads to CPU overwhelming and effects performance.
    Too many context switching will increase the CPU utilisation.

    Reducing Context switching in your code will help reducing in execution time and cpu Utilisation.

9. Multicore system / Multi processors
    - present computes are handling multiple processes at a time
    - single chip having multiple core processors and handles multiple processes at a time.
    - Dual, Quad core, Octa core processors are available in the market.
    - A core executes one thread at a time, but it handles multiple threads during the process execution time.
    - here is concurrency and parallelism comes.

10. How to Create Threads

    1. In multithreaded code never think in terms of creating thread.
        Instead think in terms of process(task).

    2. Print "Hello" -- from a diff thread

        Create class HelloWorldPrinter

    3. Implement runnable interface in your class

    4. Provide definition
            run(){}

    5. Create a thread and execute.


11. Created a program to create 100 threads.

    Created a class and implements Runnable.
    Created constructor and taken a number similar to Adder class
    Created a client class and main method.
        Using for loop, created a thread and passed i into the object initialisation.

12. Thread Pool

     A thread pool reuses previously created threads to execute current tasks
        and offers a solution to the problem of thread cycle overhead.
     Java Thread pool represents a group of worker threads that are waiting for the job
        and reused many times.
     In the case of a thread pool, a group of fixed-size threads is created.

13. Executor service
       --> Framework for thread pool.
       --> Reuses the threads in thread pool
       --> Using executors service creates a fixed size of threads.
            Assume when we have 50 threads of thread pool.
                -> if 45 threads are in execution, each thread will assigned.
                -> if 52 threads are execution, 50 will assigned to 50 threads in pool and
                        2 threads will have to wait until gets slot.
      Advantages :
           1. saves cost
           2. Optimising CPU
           3. allows to create a fixed thread-pool

14. Callable:
     Callables are interfaces, which returns data.
     Threads that we created not returning any data to the client.
     So here callable will meet the requirement and returns data to the client.

     Runnable vs Callable
        -> Runnable run method is void type and some time we have to return data to parent method
     example : Merge sort

    Implementation of mergesort using callable:

15. Future in java ?

        Future is a object in multithreaded environment.
        A Future represents the result of an asynchronous computation.
        Methods are provided to check if the computation is complete, to wait for its completion,
            and to retrieve the result of the computation.
        The method that returns the actual result from the calculation is Future. get().
            We can see that this method blocks the execution until the task is complete.

        where Future promises result to be available in * future
        Whenever using callables, use Future<v> as well.
        Future.get() method will block the main thread until the execution completes and returns the data.

        https://javarevisited.blogspot.com/2015/01/how-to-use-future-and-futuretask-in-Java.html#axzz8MPXk4ih4

16. Intro To Synchronization :
    order of execution. synchronization allows to access / execute shared resource in order.
    we can avoid critical section and race conditions.

17. Critical section :
        Part of code working on same data / shared variables.
        Potential section of code where issues can happen.
        Two users are continuously updating the same resource and may leads to conflicts.
            Hence these situation we can called as  critical section.
        for example : adder and subtractor class contributing to add the integers to array.

18. Race condition.

      When more than 1 thread tried to enters into critical section, called as race condition.

19. Preemption
      If a thread(t1) in critical section is preempted by do something else, could be a problem.
      Preemption as used with respect to operating systems means the ability of the operating system
        to preempt (that is, stop or pause) a currently scheduled task in favour of a higher priority task.
        The resource being scheduled may be the processor or I/O, among others.

20. Properties of good solution.
        Goal : avoid above 3 problems.

    1) Offer mutual exclusion.
         Allows only 1 thread to race condition.

                T1      T2       T3

           i) if T1 is allowed, T2 and T3 should wait.
           # PreventsRaceCondition

    2) Overall system should make progress

            Never block all threads. System should making progress.

    3) Bounded waiting:

            No thread should wait infinitely.
            should have time bound and should have time limit and expire.
            Order of execution -> T1 -> T2 -> T3

    4) No Busy wait.

            Busy waiting : threads check continuously (availability to execute) if they can enter OS.

            solution : notify threads when they can execute so that CPU is more productive.
            example : wait and notify in multithreading.


21. SOLUTIONS for above 4 cases :

    a) Mutex: (lock)
        Mut - mutual
        Ex  - exclusion

            nothing but a lock, that enables mutual exclusion.

            1) Adder(t1)            |           subtractor(t2)
            2) print(hi)            |           print(hi)
            3) x = read(c)          |           x = read(c)
            4) x++                  |           x--
            5) c = x                |           c = x
            print(bye)              |           print(bye)

            here lock should acquire at 3,4,5 lines and it will solves the race condition.

            Language provides lock objects
            ** lock objects

                1) only 1 thread can lock at a time others have to wait.
                2) Notifies other thread to execute, when lock is released.

                -> Mutual exclusion
                -> bounded waiting
                -> system progressing
                -> no busy wait

                Lock lock = new ReentrantLock(); // supports mutual exclusion

    2) Synchronized Keyword
            (Java specific)

            The synchronized keyword in java helps us reduce the concurrency when we share the same resource
                between multiple threads or processes.
            The fundamental features of the synchronized keyword are:
                The synchronized keyword locks the resources to a thread so that no other thread can access
                it at a time
            In java, many objects (default) have implicit lock.
            #usage:
                Just use 'synchronized' with variable/object

                example showed in addsubsync package.

                    @Override
                    public void run() {
                        for (int i = 1; i <= 10000; ++i) {
                            synchronized (count){
                                count.value += i; // CRITICAL SECTION
                            }
                        }
                    }

                synchronized keyword simply locks the object and after execution of code at critical section,
                    the lock will be released automatically and notifies the next thread.


    NOTE:
            if you have 2 shared variables use mutex (sync confuses when you have 2 shared variables ) and
            if you have single shared variable go with synchronized keyword.


    3) Synchronized methods:

        declaring method of a class as synchronized,
            only 1 thread can access any sync method on that object.

        example:
        class count{
            private int value=0;
            public synchronized void incrementValue(int offset){
                this.value +=offset;
            }
        }

        incrementValue() can be accessed only one thread a time.

        refer syncmethods package for example.

22. Intro to Semaphore

        Allows multiple threads in critical section.

        A semaphore is a non-negative integer that represents the number of available units of a resource.
        A thread or process can acquire a unit of the resource by decrementing the semaphore, and release it by
            incrementing the semaphore.
        A mutex is a binary variable that can have only two values: locked or unlocked.

        https://www.geeksforgeeks.org/semaphores-in-process-synchronization/

        eg: Producer Consumer problem.
                Adding... ----->[][][][][][][]------> Subtracting..
                (Producer)                            (Consumer)

            another example:
                Producer : tailors
                Consumer : customers

            Now use case:
                1. we only allow consumer to enter when we have shirt available
                2. also, we allow producer to create shirt only if space is available.


24. Producer Consumer Problem

     producer produces, consumer consumes.
     when you need more than one thread in your critical section, go with semaphores.

25. Semaphore :

    Mutex with upperbound > 1
    Semaphore s = new Semaphore(2);
                   -> at max (2) threads can acquire lock at a time.
    Semaphore is used to create a fixed number of threads are allowed to critical section.

    How to use:

        LOCKS -> lock(), unlock()
        SEMAPHORE -> acquire(), release()

        In semaphore maintains a counter, which main

        Producer                     |                   Consumer
        1) p.acquire() lock          |                  1) c.acquire()
        2) add item                  |                  2) remove item
        3) c.release()  //release    |                  3) p.release()

        so in the producer and consumer constructors we are passing both consumer and producer semaphores.


26. Concurrent DATA structures
    Concurrent collection in Java refers to a set of classes that allow multiple threads to access and modify a
        collection concurrently, without the need for explicit synchronization.
    These collections are part of the java.util.concurrent package and provide thread-safe implementations of
        the traditional collection interfaces like List, Set, and Map.

    https://medium.com/thefreshwrites/concurrent-collection-in-java-ee9af58fb9ce

    1) Atomic data types

            multiple threads are tried to access the same shared variable. for that conflict
            we suggested to use locks and sync.

            if you are using atomic data types, no need to use mutex, synchronized keyword,.
            Atomic data types are class in java, that implements serializable interface.
            These types are thread safe.

            Atomic means only one thread accesses the variable (static type).
                Atomic is thread-safe, but it is slow.
            Nonatomic means multiple threads access the variable (dynamic type).
                Nonatomic is thread-unsafe, but it is fast.

            AtomicInteger, AtomicBoolean, AtomicReference, AtomicLong

    2) Concurrent Hashmaps

        allow datatype to perform better in concurrent environment.
        ConcurrentHashMap, however, allows concurrent reads and limited concurrent writes, making it more
            scalable and often faster in practice. It provides very high concurrency in a multithreaded environment.
            The read operation can be very fast when the write operation is done with a lock.

        HashMap isn't thread-safe at all. Thus, it is non-synchronized in nature.
        The ConcurrentHashMap, on the other hand, is thread-safe.

        Hashtable locks the entire table during a write operation, thereby preventing other reads or writes.
        This could be a bottleneck in a high-concurrency environment.

    3) Is ConcurrentHashMap faster than HashMap?

       HashMap performance is relatively high because it is non-synchronized in nature and any number of threads
       can perform simultaneously. But ConcurrentHashMap performance is low sometimes because sometimes Threads are
       required to wait on ConcurrentHashMap.

    4) What is difference between synchronizedMap and ConcurrentHashMap?

       SynchronizedMap() requires each thread to acquire a lock on the entire object for both read/write operations.
       By comparison, the ConcurrentHashMap allows threads to acquire locks on separate segments of the collection,
       and make modifications at the same time.


27. DeadLocks

        Two threads waiting on each others for infinitely.
        Deadlock in Java is a condition where two or more threads are blocked forever,
        waiting for each other.








